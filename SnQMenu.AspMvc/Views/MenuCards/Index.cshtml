@*@CustomerCode*@
@{
    Layout = "_LayoutMenuCard.cshtml";
}
@{
    @using CommonBase.Extensions
    @using SnQMenu.AspMvc.Models.Modules.Common
    @using SnQMenu.Contracts.Modules.Common
    @using SnQMenu.AspMvc.Modules.Handler
    @using SnQMenu.AspMvc.Modules.Language
    @using SnQMenu.AspMvc.Modules.Session
    @using SnQMenu.AspMvc.Modules.ThirdPartyServices
    @using SnQMenu.AspMvc.Modules.View
    @model IEnumerable<SnQMenu.AspMvc.Models.Business.Food.MenuCard>

    var viewBagWrapper = new ViewBagWrapper(ViewBag);
    var sessionWrapper = new SessionWrapper(Context.Session);
    var menuData = Model.Where(e => e.ItemType == MenuCardItemType.RestaurantData);
    var appName = $"{nameof(SnQMenu)}.{menuData.FirstOrDefault()?.Tag}";
    var htmlAttributes = HtmlStoreService.GetHtmlAttributes(appName);
    Func<string, string, string> getAttribute = (string key, string defaultValue) =>
    {
        var item = htmlAttributes.FirstOrDefault(e => e.Key.Equals(key));

        return item != null ? item.Content.GetValueOrDefault(defaultValue) : defaultValue;
    };

    viewBagWrapper.Translate = Translator.TranslateIt;
    viewBagWrapper.Controller = ViewContext.RouteData.Values["controller"].ToString();
    viewBagWrapper.Action = ViewContext.RouteData.Values["action"].ToString();
    viewBagWrapper.CommandMode = CommandMode.None;

    ViewData["Title"] = menuData.FirstOrDefault()?.Text;

    @if (string.IsNullOrEmpty(ErrorHandler.LastViewError) == false)
    {
        <div class="alert alert-danger" role="alert">
            @ErrorHandler.GetLastViewErrorAndClear()
        </div>
    }
    else
    {
        var cardStyle = getAttribute("card.style", "margin-bottom: 1em;");
        var cardBodyStyle = getAttribute("card.body.style", string.Empty);
        var cardListGroupStyle = getAttribute("card.list.group.style", string.Empty);
        var cardListGroupItemStyle = getAttribute("card.list.group.item.style", string.Empty);
        var contentModels = Model.Where(e => e.State == State.Active && (e.ItemType & MenuCardItemType.ContentType) > 0);

        @foreach (var item in contentModels)
        {
            item.ViewBagInfo = viewBagWrapper;

            var cardStyleItem = getAttribute($"card.style.{item.Guid}", cardStyle);
            var cardBodyStyleItem = getAttribute($"card.body.style.{item.Guid}", cardBodyStyle);
            var cardListGroupStyleItem = getAttribute($"card.list.group.style.{item.Guid}", cardListGroupStyle);
            var cardListGroupItemStyleItem = getAttribute($"card.list.group.item.style.{item.Guid}", cardListGroupItemStyle);

            <div class="card" style="@cardStyleItem">
                @if (item.ImageUrl.HasContent())
                {
                    <img class="card-img-top" src="@item.ImageUrl" alt="Item image">
                }
                <div class="card-body" style="@cardBodyStyleItem">
                    <h5 class="card-title">@item.Text</h5>
                    <p class="card-text">@item.SubText</p>
                </div>
                <ul class="list-group list-group-flush" style="@cardListGroupStyleItem">
                    @if (item.ItemType == MenuCardItemType.MenuItem)
                    {
                        var displayValue = $"{item.Price} {item.Currency}";

                        <li class="list-group-item"  style="@cardListGroupItemStyleItem">@displayValue</li>
                        @if (item.AllergenType.HasContent())
                        {
                            <li class="list-group-item"  style="@cardListGroupItemStyleItem"><strong>@($"Alergene: {item.AllergenType}")</strong></li>
                        }
                    }
                </ul>
            </div>
        }
    }
}
